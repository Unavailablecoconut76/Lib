import React, { useEffect, useState } from "react";
import adminIcon from "../assets/pointing.png";
import usersIcon from "../assets/people-black.png";
import bookIcon from "../assets/book-square.png";
import { Pie, Bar } from "react-chartjs-2";
import Header from "../layout/Header";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  LineElement,
  PointElement,
  ArcElement,
} from "chart.js";
import logo from "../assets/black-logo.png";
import { useSelector } from "react-redux";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  LineElement,
  PointElement,
  ArcElement
);

const AdminDashboard = () => {
  const { user } = useSelector((state) => state.auth);
  const { users } = useSelector((state) => state.user);
  const { books } = useSelector((state) => state.book);
  const { allBorrowedBooks } = useSelector((state) => state.borrow);
  const { settingPopup } = useSelector((state) => state.popup);

  const [totalUsers, setTotalUsers] = useState(0);
  const [totalAdmin, setTotalAdmin] = useState(0);
  const [totalBooks, setTotalBooks] = useState((books && books.length) || 0);
  const [totalBorrowedBooks, setTotalBorrowedBooks] = useState(0);
  const [totalReturnedBooks, setTotalReturnedBooks] = useState(0);

  useEffect(() => {
    let numberofusers = users.filter((user) => user.role === "User");
    let numberofadmins = users.filter((user) => user.role === "Admin");
    setTotalUsers(numberofusers.length);
    setTotalAdmin(numberofadmins.length);
    setTotalBooks(books?.length || 0); // Add books count here

    let numberofTotalBorrowedBooks = allBorrowedBooks.filter(
      (book) => book.returnDate === null
    );
    let numberofTotalReturnedBooks = allBorrowedBooks.filter(
      (book) => book.returnDate !== null
    );
    setTotalBorrowedBooks(numberofTotalBorrowedBooks.length);
    setTotalReturnedBooks(numberofTotalReturnedBooks.length);
  }, [allBorrowedBooks, users, books]); // Add books to dependency array

  const data = {
    labels: ["TotalBorrowedBooks", "Total Returned Books"],
    datasets: [
      {
        data: [totalBorrowedBooks, totalReturnedBooks],
        backgroundColor: ["#3D3E3E", "#151619"],
        hoverOffset: 4,
      },
    ],
  };

  const handlePrint = () => {
    const printContent = `
      LIBRARY MANAGEMENT SYSTEM - ADMIN REPORT
      --------------------------------------
      Generated by: ${user?.name} (Admin)
      Date: ${new Date().toLocaleDateString()}
      Time: ${new Date().toLocaleTimeString()}
      
      SYSTEM STATISTICS
      ----------------
      Total Users: ${totalUsers}
      Total Admins: ${totalAdmin}
      Total Books: ${totalBooks}
      
      BORROWING OVERVIEW
      -----------------
      Currently Borrowed: ${totalBorrowedBooks}
      Total Returned: ${totalReturnedBooks}
      Return Rate: ${((totalReturnedBooks / (totalBorrowedBooks + totalReturnedBooks)) * 100).toFixed(2)}%
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>Admin Report - ${user?.name}</title>
          <style>
            body { 
              font-family: 'Arial', sans-serif; 
              padding: 20px;
              line-height: 1.6;
            }
            h1 { 
              font-size: 24px; 
              margin-bottom: 20px;
              color: #333;
            }
            .section { 
              margin: 15px 0;
              padding: 10px;
              background: #f5f5f5;
            }
            .stats { 
              margin-left: 20px;
              font-family: monospace;
            }
            .timestamp { 
              color: #666; 
              font-size: 14px;
              margin-bottom: 20px;
            }
            .footer {
              margin-top: 30px;
              font-size: 12px;
              color: #666;
              border-top: 1px solid #ccc;
              padding-top: 10px;
            }
          </style>
        </head>
        <body>
          <pre>${printContent}</pre>
          <div class="footer">
            Generated from Library Management System
            ${new Date().toLocaleString()}
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <>
      <main className="relative flex-1 p-4 pt-24">
        <Header />
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-4">
          {/* Stats Cards - First Row */}
          <div className="col-span-3 grid grid-cols-1 md:grid-cols-3 gap-3">
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={usersIcon} alt="users" className="w-6 h-6" />
                </span>
                <div>
                  <h3 className="text-lg font-semibold">Total Users</h3>
                  <p className="text-2xl font-bold mt-1">{totalUsers}</p>
                </div>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={adminIcon} alt="admins" className="w-6 h-6" />
                </span>
                <div>
                  <h3 className="text-lg font-semibold">Total Admins</h3>
                  <p className="text-2xl font-bold mt-1">{totalAdmin}</p>
                </div>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={bookIcon} alt="books" className="w-6 h-6" />
                </span>
                <div>
                  <h3 className="text-lg font-semibold">Total Books</h3>
                  <p className="text-2xl font-bold mt-1">{totalBooks}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Charts Section */}
          <div className="xl:col-span-2 bg-white p-4 rounded-lg shadow-sm">
            <h3 className="text-lg font-semibold mb-2">Books Status Overview</h3>
            <div className="h-[250px]">
              <Bar
                data={{
                  labels: ["Borrowed Books", "Returned Books"],
                  datasets: [
                    {
                      label: "Books Status",
                      data: [totalBorrowedBooks, totalReturnedBooks],
                      backgroundColor: ["#3D3E3E", "#151619"],
                      borderColor: ["#3D3E3E", "#151619"],
                      borderWidth: 1,
                    },
                  ],
                }}
                options={{
                  responsive: true,
                  maintainAspectRatio: true,
                  scales: {
                    y: {
                      beginAtZero: true,
                      ticks: { stepSize: 1, font: { size: 11 } },
                    },
                    x: {
                      ticks: { font: { size: 11 } },
                    },
                  },
                  plugins: {
                    legend: {
                      display: false,
                    },
                  },
                }}
              />
            </div>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-sm">
            <h3 className="text-lg font-semibold mb-2">Distribution</h3>
            <div className="h-[250px] flex items-center justify-center">
              <Pie
                data={data}
                options={{
                  responsive: true,
                  maintainAspectRatio: true,
                  plugins: {
                    legend: {
                      position: "bottom",
                      labels: {
                        font: { size: 11 },
                        padding: 8,
                      },
                    },
                  },
                }}
              />
            </div>
          </div>

          {/* Quick Actions */}
          <div className="col-span-3 grid grid-cols-1 md:grid-cols-3 gap-3">
            <div className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={bookIcon} alt="manage books" className="w-6 h-6" />
                </span>
                <div>
                  <h4 className="font-semibold">Manage Books</h4>
                  <p className="text-sm text-gray-600">Add or update library books</p>
                </div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={usersIcon} alt="users" className="w-6 h-6" />
                </span>
                <div>
                  <h4 className="font-semibold">Manage Users</h4>
                  <p className="text-sm text-gray-600">View and manage users</p>
                </div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-center gap-3">
                <span className="bg-gray-100 p-3 rounded-full">
                  <img src={adminIcon} alt="admin" className="w-6 h-6" />
                </span>
                <div>
                  <h4 className="font-semibold">Add Admin</h4>
                  <p className="text-sm text-gray-600">Create new admin account</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <button
          onClick={handlePrint}
          className="fixed bottom-6 right-6 bg-black text-white px-4 py-2 rounded-full shadow-lg hover:bg-gray-800 flex items-center gap-2"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-5 w-5" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" 
            />
          </svg>
          Generate Report
        </button>
      </main>
    </>
  );
};

export default AdminDashboard;
